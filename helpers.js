const fs = require("fs");
const {google} = require("googleapis");

let helpers = {};
helpers.writeFirebaseConfigFile = function () {
    let file = fs.readFileSync(__dirname + '/_service.js', 'utf-8');
    let after = file.replace('// See https://firebase.google.com/docs/web/setup for more details.\n', '').replace('', '');
    after = after.replace('// You will also need to load the Firebase SDK.\n', '');
    after = after.replace('// Copy and paste this into your JavaScript code to initialize the Firebase SDK.\n', '');
    after = after.replace('firebase.initializeApp(', '').replace(');', '');
    let newFile = `const firebaseConfig = ${after};
        module.exports.firebaseConfig = firebaseConfig;
    `;
    let projectConf = JSON.parse(after);
    fs.writeFileSync(__dirname + '/src/firebase-config.js', newFile);
    let projectID = projectConf.projectId;
    let initProject = `{
 "projects": {
   "default": "${projectID}"
 }
}`;
    fs.writeFileSync(__dirname + '/.firebaserc', initProject);
    let publicFile = `
// Generated By LeadSuitCase 
// https://leadsuitcase.ml

importScripts('https://www.gstatic.com/firebasejs/7.12.0/firebase-app.js');
importScripts('https://www.gstatic.com/firebasejs/7.12.0/firebase-messaging.js');
${file}
const messaging = firebase.messaging();
messaging.setBackgroundMessageHandler(function(payload) {
    console.log('[firebase-messaging-sw.js] Received background message ', payload);
    // Customize notification here
    const notificationTitle = payload.notification.title;
    const notificationOptions = {
        body: payload.notification.body,
        icon: payload.notification.icon,
        vibrate: [200, 100, 200],
        tag:"leadSuitCase",
        renotify:true,
        data:{
            link: payload.notification.data.link ?? ''
    }
};
return self.registration.showNotification(notificationTitle,
    notificationOptions);
});
self.addEventListener("notificationclick",function (event) {
    event.notification.close();
    event.waitUntil(
        clients.openWindow(event.data.url + "?notification_id=" + event.data.id)
    );
});
`;
    fs.writeFileSync(__dirname + '/public/firebase-messaging-sw.js', publicFile);
    fs.unlinkSync(__dirname + '/_service.js');
};

const SCOPES = ["https://www.googleapis.com/auth/gmail.send"];
const TOKEN_PATH = __dirname + "/functions/token.json";
let client_json = function () {
    return JSON.parse(fs.readFileSync(__dirname + '/functions/client_id.json'));
};

let AuthClass = {
    oAuth2client: function () {
        const {client_secret, client_id, redirect_uris} = client_json().web;
        const oAuth2Client = new google.auth.OAuth2(
            client_id,
            client_secret,
            "http://localhost:8080/auth"
        );
        return oAuth2Client;
    },
    getToken: async function (code) {
        const oAuth2Client = this.oAuth2client();
        await oAuth2Client.getToken(code, (err, token) => {
            if (err) {
                console.log(err);
                return {msg: "Error retrieving access token", error: err};
            }
            oAuth2Client.setCredentials(token);
            // Store the token to disk for later program executions
            fs.writeFileSync(TOKEN_PATH, JSON.stringify(token));
            return new Promise(resolve => resolve({msg: 'done'}));
        });
    },
    getAuthLink: function () {
        const oAuth2Client = this.oAuth2client();
        return oAuth2Client.generateAuthUrl({
            access_type: "offline",
            scope: SCOPES
        });
    },
    auth: function () {
        const {client_secret, client_id, redirect_uris} = client_json().web;
        const oAuth2Client = new google.auth.OAuth2(
            client_id,
            client_secret,
            redirect_uris[0]
        );
        let token = fs.readFileSync(TOKEN_PATH);
        oAuth2Client.setCredentials(JSON.parse(token));
        return oAuth2Client;
    },
};


module.exports.helpers = helpers;
module.exports.auth = AuthClass;